{% extends 'layout.twig' %}

{% block title %}Curate — The News Log{% endblock %}

{% block content %}
<section class="card">
    <div class="badge">Curate</div>
    <h2>Curate Item</h2>

    {% if error %}
        <div class="alert alert--error" data-auto-dismiss="10000">{{ error }}</div>
    {% endif %}

    {% if message %}
        <div class="alert alert--success" data-auto-dismiss="10000">{{ message }}</div>
    {% endif %}

    {% if item %}
        <article class="curate-item">
            <h3>{{ item.title }}</h3>
            <p><strong>Feed:</strong> {{ item.feed_title }}</p>
            {% if item.source_name %}
                <p><strong>Source:</strong> {{ item.source_name }}</p>
            {% endif %}
            {% if item.summary_raw %}
                {% set cleaned_summary = item.summary_raw
                    |replace({
                        '</p>': '\n\n',
                        '<br>': '\n',
                        '<br/>': '\n',
                        '<br />': '\n',
                        '\r\n': '\n',
                        '\r': '\n',
                        '&nbsp;': ' '
                    })
                    |striptags %}
                {% if cleaned_summary|trim %}
                    <div class="curate-item__summary">
                        {% for paragraph in cleaned_summary|split('\n\n') %}
                            {% if paragraph|trim %}
                                <p>{{ paragraph|trim }}</p>
                            {% endif %}
                        {% endfor %}
                    </div>
                {% endif %}
            {% endif %}
            <p><a href="{{ item.url }}" target="_blank" rel="noopener">Open original link ↗</a></p>
        </article>

        {% if curated %}
            <section class="curate-existing">
                <h3>Existing Curated Entry</h3>
                <p><strong>Title:</strong> {{ curated.title }}</p>
                <p><strong>Blurb:</strong> {{ curated.blurb }}</p>
                {% if edition %}
                    <p><strong>Edition:</strong> {{ edition.edition_date }} ({{ edition.status|capitalize }})</p>
                {% endif %}
            </section>
        {% endif %}

        <form method="post" class="form" x-data="{ 
            title: '{{ form.title|default('')|e('js') }}', 
            blurb: '{{ form.blurb|default('')|e('js') }}', 
            date: '{{ form.edition_date|default('')|e('js') }}', 
            maxBlurb: 180 
        }">
            {{ csrf_field() }}
            <div class="form-group">
                <label for="title">Curated Title</label>
                <input id="title" name="title" type="text" class="input-control" x-model="title" value="{{ form.title|default('') }}" required>
            </div>

            <div class="form-group">
                <label for="blurb">One-line Blurb <span class="form-hint" x-text="blurb.length + '/' + maxBlurb"></span></label>
                <textarea id="blurb" name="blurb" class="input-control" rows="3" x-model="blurb" required>{{ form.blurb|default('') }}</textarea>
                <p class="form-hint form-hint--warn" x-show="blurb.length > maxBlurb">Too long; aim for a snappy one‑liner.</p>
            </div>

            <div class="form-group">
                <label for="edition_date">Edition Date</label>
                <input id="edition_date" name="edition_date" type="date" class="input-control" x-model="date" value="{{ form.edition_date|default('') }}" required>
            </div>

            <div class="form-group">
                <label for="tags">Tags (comma separated)</label>
                <div 
                    x-data="tagsField({ 
                        initial: '{{ form.tags|default('')|e('js') }}', 
                        suggestUrl: '/admin/tags/suggest', 
                        validateUrl: '/admin/tags/validate',
                        allUrl: '/admin/tags/all' 
                    })" 
                    x-init="init()" 
                    @keydown.escape.window="closeSuggest()" 
                    @click.outside="open=false"
                >
                    <input id="tags"
                           type="text"
                           class="input-control"
                           x-model="inputVal"
                           placeholder="e.g. AI, Startups"
                           autocomplete="off"
                           @input.debounce.200ms="onInput()"
                           @focus="open=true; fetchSuggest(true)"
                           @keydown.enter.prevent="commit()"
                           @keydown="if ($event.key === ',') { $event.preventDefault(); commit(); }"
                           @keydown.backspace="maybePop($event)">

                    <div class="chips" x-show="tags.length > 0">
                        <template x-for="(t,i) in tags" :key="t">
                            <span class="chip">
                                <span x-text="t"></span>
                                <button type="button" @click="remove(i)" aria-label="Remove tag">×</button>
                            </span>
                        </template>
                    </div>

                    <input type="hidden" name="tags" :value="joined()">

                    <div id="tag-feedback" x-html="feedbackHtml"></div>

                    <div id="tag-suggestions" class="tag-suggest-container" x-show="open" x-cloak x-transition @click="onSuggestClick($event)" x-html="suggestionsHtml"></div>
                </div>
            </div>

            <div class="form-group form-group--inline">
                <label class="checkbox">
                    <input type="checkbox" name="publish_now" value="1" {% if form.publish_now %}checked{% endif %}>
                    <span>Publish immediately</span>
                </label>
                <label class="checkbox">
                    <input type="checkbox" name="is_pinned" value="1" {% if form.is_pinned %}checked{% endif %}>
                    <span>Pin this link</span>
                </label>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary" :disabled="!title || !date || blurb.length === 0 || blurb.length > maxBlurb">Save Curated Link</button>
            </div>
        </form>

        <form method="post" action="/admin/curate/{{ item.id }}/delete" class="form-inline" data-confirm="Delete this item?">
            {{ csrf_field() }}
            <button type="submit" class="btn btn-secondary">Delete Item</button>
        </form>
    {% else %}
        <div class="empty-state">
            <p>Item not found.</p>
        </div>
    {% endif %}
</section>
<script>
    // Alpine helper for tags field
    window.tagsField = function tagsField(opts) {
        return {
            inputVal: '',
            tags: [],
            suggestionsHtml: '',
            open: false,
            feedbackHtml: '<p class="form-hint form-hint--muted">Tags will be saved exactly as typed.</p>',
            _suggestAbort: null,
            _validateAbort: null,
            _allLoaded: false,
            _all: [],
            init() {
                this.tags = this._parseCsv(opts.initial || '');
                this.validate(true);
            },
            joined() {
                const active = this.inputVal.trim();
                const parts = [...this.tags];
                if (active) parts.push(active);
                return parts.join(', ');
            },
            onInput() {
                this.fetchSuggest();
                this.validate();
            },
            commit() {
                const v = this.inputVal.trim();
                if (!v) return;
                if (!this.tags.includes(v)) this.tags.push(v);
                this.inputVal = '';
                this.open = false;
                this.validate();
            },
            maybePop(e) {
                if (this.inputVal === '' && this.tags.length > 0) {
                    e.preventDefault();
                    this.tags.pop();
                    this.validate();
                }
            },
            remove(i) {
                this.tags.splice(i, 1);
                this.validate();
            },
            pick(s) {
                if (!this.tags.includes(s)) {
                    this.tags.push(s);
                }
                this.inputVal = '';
                this.open = false;
                this.validate();
            },
            closeSuggest() { this.open = false; },
            _parseCsv(csv) {
                return csv.split(',').map(t => t.trim()).filter(Boolean);
            },
            _ctx() {
                const existing = [...this.tags];
                const active = this.inputVal.trim();
                return { existing, active };
            },
            fetchSuggest(force = false) {
                const { active } = this._ctx();
                if (!active && !force) { this.suggestionsHtml = ''; this.open = false; return; }
                if (this._suggestAbort) { this._suggestAbort.abort(); }
                this._suggestAbort = new AbortController();
                const params = new URLSearchParams();
                params.set('tags', active);
                params.set('tags_full', this.joined());
                if (this.tags.length) params.set('existing', this.tags.join(', '));
                fetch(`${opts.suggestUrl}?${params.toString()}`, {
                    credentials: 'same-origin',
                    headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'text/html' },
                    signal: this._suggestAbort.signal,
                })
                .then(r => r.ok ? r.text() : Promise.reject(r.status))
                .then(html => {
                    this.suggestionsHtml = html && html.trim() !== '' ? html : '<div class="tag-suggest tag-suggest--empty">No saved tags match yet.</div>';
                    this.open = true;
                })
                .catch(() => { this._fallbackSuggest(active).catch(() => {}); })
                .finally(() => { this._suggestAbort = null; });
            },
            async _ensureAllTags() {
                if (this._allLoaded) return;
                const res = await fetch(opts.allUrl, { credentials: 'same-origin', headers: { 'Accept': 'application/json' } });
                if (!res.ok) throw new Error('failed');
                const data = await res.json();
                this._all = Array.isArray(data.tags) ? data.tags : [];
                this._allLoaded = true;
            },
            async _fallbackSuggest(active) {
                try { await this._ensureAllTags(); } catch (e) {
                    this.suggestionsHtml = '<div class="tag-suggest tag-suggest--empty">No saved tags match yet.</div>'; this.open = true; return;
                }
                const term = (active || '').toLowerCase();
                const existing = new Set(this.tags.map(t => t.toLowerCase()));
                const matches = this._all.filter(n => n.toLowerCase().includes(term) && !existing.has(n.toLowerCase())).slice(0, 8);
                if (matches.length === 0) {
                    this.suggestionsHtml = '<div class="tag-suggest tag-suggest--empty">No saved tags match yet.</div>';
                } else {
                    const items = matches.map(n => `<li><button type=\"button\" class=\"tag-suggestion\" data-tag-name=\"${n.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')}\">${n}</button></li>`).join('');
                    this.suggestionsHtml = `<ul class=\"tag-suggest\" role=\"listbox\">${items}</ul>`;
                }
                this.open = true;
            },
            onSuggestClick(e) {
                const btn = e.target.closest && e.target.closest('.tag-suggestion');
                if (!btn) return;
                const name = btn.getAttribute('data-tag-name') || btn.textContent || '';
                const v = name.trim();
                if (!v) return;
                if (!this.tags.includes(v)) this.tags.push(v);
                this.inputVal = '';
                this.open = false;
                this.validate();
            },
            validate(force = false) {
                if (this._validateAbort) { this._validateAbort.abort(); }
                this._validateAbort = new AbortController();
                const params = new URLSearchParams();
                params.set('tags', this.joined());
                fetch(`${opts.validateUrl}?${params.toString()}`, {
                    credentials: 'same-origin',
                    headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'text/html' },
                    signal: this._validateAbort.signal,
                })
                .then(r => r.ok ? r.text() : Promise.reject(r.status))
                .then(html => { this.feedbackHtml = html; })
                .catch(() => { /* ignore */ })
                .finally(() => { this._validateAbort = null; });
            }
        };
    };
</script>
{% endblock %}
